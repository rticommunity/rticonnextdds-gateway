Example Code: Shapes topics aggregation
=======================================

Below there are the instructions to run this example.

This example requires building the Python binding plug-in, as explained in the
top-level documentation.

Running the Example
-------------------

To run this example you will need two instances of *RTI Shapes Demo* and a
single instance of *Routing Service*.

To run *Routing Service*, you will need first to set up your environment as
follows:

For *Linux® and macOS®* systems:

.. code-block:: bash

    export RTI_LD_LIBRARY_PATH=$NDDSHOME/lib/<ARCH>


For *Windows* systems:

.. code-block:: bash

    set PATH=%PATH%;%NDDSHOME%\lib\<ARCH>


where `<ARCH>` shall be replaced with the target architecture you built the
the binding plug-in.


1.  Run one instance of *ShapesDemo* on domain 0. This will be the publisher
    application. Publish a blue squares and blue circles.

2.  Run the other instance of *ShapesDemo* on domain 1. This will be the
    subscriber application. Subscribe to squares, circles and triangles and
    observe how no data is received.

3.  Now run *Routing Service* to cause the aggregation data from the publisher
    application to the subscriber application.

    Run the following command from the example build directory for *Windows*
    systems:

    .. code-block:: bash

        %NDDSHOME%\bin\rtiroutingservice ^
            -cfgFile RsShapesProcessor.xml ^
            -cfgName RsShapesAggregator

    And for *Linux and macOS* systems:

    .. code-block:: bash

        $NDDSHOME/bin/rtiroutingservice \
            -cfgFile RsShapesProcessor.xml \
            -cfgName RsShapesAggregator

    You should see how the subscriber application receives samples from squares,
    circles and triangles. The squares and circles samples are exactly the same
    generated by the publisher application. The triangles samples will follow
    the same direction than the squares and their size will change with the
    horizontal position of the circles.

4.  Repeat the first step but publish other colors. You should observe the same
    behavior in the subscriber application for the new colors.

5.  In the publisher application, delete all the *DataWriters*. You should see
    the instances being disposed. Now delete all *DataReaders* from the
    subscriber application.
